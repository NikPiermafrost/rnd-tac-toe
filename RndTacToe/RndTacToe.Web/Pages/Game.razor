@page "/{GameId}"
@inject IMainHelpersService MainHelpersService
@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.SignalR.Client
@implements IAsyncDisposable

<div class="container" style="max-width: 500px">
    <div class="w-100">
        <div class="back-to-home" @onclick="@(() => NavigationManager.NavigateTo("/"))">Back to Home</div>
    </div>
    <div class="d-flex justify-content-center mt-3">
        @if (!string.IsNullOrEmpty(enemyPlayerName))
        {
            <h4>You're against @enemyPlayerName</h4>
        }
        else
        {
            <h4>Waiting for player to connect...</h4>
        }
    </div>
    <div class="d-flex justify-content-center mt-3">
        @if(isYourTurn)
        {
            <h4>@currentPlayerName Turn!</h4>
        }
        else
        {
            <h4>@enemyPlayerName Turn!</h4>
        }
    </div>
    <div class="d-flex justify-content-center mt-3">
        @if(IsConnected) 
        {
            <div class="grid-container" style="@(isYourTurn || hasSomeoneWon ? "" : unclickableStyle)">
                @foreach(var item in GameGrid)
                {
                    <div class="grid-item" @onclick="@(() => MakeTheMove(item.CellPosition))">
                        @item.StoredChar
                    </div>
                }
            </div>
        }
        else
        {
            <h4>Waiting for the opponent to connect...</h4>
        }
    </div>
    <div class="w-100 mt-3">
        @if(hasSomeoneWon)
        {
            <div class="rematch" @onclick="@(() => RestartMatch())">@(isYourTurn ? "Rematch!" : "Waiting opponent to accept...")</div>
        }
    </div>
</div>

@code {
    [Parameter]
    public string GameId { get; set; }

    private HubConnection hubConnection;
    private Random rnd = new Random();
    private string currentPlayerName;
    private int currentRandomness = 0;
    private string enemyPlayerName;
    private int enemyPlayerRandomness = 0;
    private string yourSimbol = "";
    private bool hasSomeoneWon = false;
    private string unclickableStyle = "pointer-events: none";
    bool isYourTurn = true;

    private TicTacToeCell[] GameGrid = new TicTacToeCell[9];

    protected override async Task OnInitializedAsync()
    {
        currentPlayerName = MainHelpersService.GetCurrentPlayerName();
        currentRandomness = MainHelpersService.GetCurrentRandomness();
        var hasStarted = MainHelpersService.GetHasStartedStatus();
        yourSimbol = hasStarted ? "X" : "O";
        isYourTurn = hasStarted;
        InitializeEmptyGrid();
        await initializeConnection();

        if(string.IsNullOrEmpty(currentPlayerName)) 
        {
            NavigationManager.NavigateTo("/");
        }
        sendInfoForInitialCall();
    }

    async Task initializeConnection() 
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/game-hub"))
            .Build();

        ConnectToOpponent();
        ConnectToMoves();
        ConnectToDispose();
        ConnectToRematch();

        await hubConnection.StartAsync();
    }

    void RestartMatch() 
    {
        if(isYourTurn) 
        {
            hubConnection.SendAsync("Rematch", GameId);
        }
    }

    void ConnectToRematch() 
    {
        hubConnection.On("RestartMatch", () => 
            {
                InitializeEmptyGrid();
                var hasStarted = MainHelpersService.GetHasStartedStatus();
                isYourTurn = !hasStarted;
                MainHelpersService.SetHasStarted(!hasStarted);
                MainHelpersService.SetRandomnessValue(currentPlayerName);
                currentRandomness = MainHelpersService.GetCurrentRandomness();
            });
    }

    void ConnectToOpponent() 
    {
        hubConnection.On<string, int>("ReceiveOpponent", (username, randomChanhce) => 
            {
                Console.WriteLine($"Enemy player {username} received");
                if(username != currentPlayerName && string.IsNullOrEmpty(enemyPlayerName))
                {
                    this.enemyPlayerRandomness = randomChanhce;
                    this.enemyPlayerName = username;
                    sendInfoForCallback();
                    StateHasChanged();
                }
            });
    }

    void ConnectToMoves()
    {
        hubConnection.On<int, string>("Move", (position, symbol) =>
            {
                GameGrid[position].StoredChar = symbol;
                if(symbol == yourSimbol) 
                {
                    isYourTurn = false;
                }
                else
                {
                    isYourTurn = true;
                }
                hasSomeoneWon = MainHelpersService.HasSomeOneWon(GameGrid);
                var draw = checkIfDraw();
                if(draw) 
                {
                    hasSomeoneWon = true;
                }
                StateHasChanged();
            });
    }

    void ConnectToDispose()
    {
        hubConnection.On<string>("HasExited", (message) => 
            {
                Console.WriteLine(message);
            });
    }

    void sendInfoForInitialCall() 
    {
        hubConnection.SendAsync("OnUserConnect", GameId, currentPlayerName, currentRandomness);
    }

    void sendInfoForCallback()
    {
        if(hubConnection.State == HubConnectionState.Connected) 
        {
            hubConnection.SendAsync("OnUserConnect", GameId, currentPlayerName, currentRandomness);
        }
    }

    public bool IsConnected =>
        hubConnection.State == HubConnectionState.Connected;

    void InitializeEmptyGrid()
    {
        for(int i = 0; i < 9; i++)
        {
            GameGrid[i] = new TicTacToeCell
            {
                StoredChar = "",
                CellPosition = i
            };
        }
        StateHasChanged();
    }

    void MakeTheMove(int cellPosition) 
    {
        var actualMove = WillItBeTheRightMove(cellPosition);
        var requestedCell = GameGrid.FirstOrDefault(x => x.CellPosition == actualMove);
        if (string.IsNullOrEmpty(requestedCell.StoredChar))
        {
            hubConnection.SendAsync("MoveSelected", GameId, requestedCell.CellPosition, yourSimbol);
        }
        StateHasChanged();
    }

    private int WillItBeTheRightMove(int requestedCell)
    {
        var willItBe = rnd.Next(1, 101);
        if(currentRandomness == 0 || willItBe >= currentRandomness) 
        {
            return requestedCell;
        }
        return ItIsNotTheRightMove(requestedCell);
    }

    private int ItIsNotTheRightMove(int requestedCell) 
    {
        if (GameGrid.Where(x => string.IsNullOrEmpty(x.StoredChar)).Count() == 1) 
        {
            return requestedCell;
        }
        bool isItEmpty = false;
        int potentialResponse = 0;
        while(!isItEmpty) 
        {
            potentialResponse = rnd.Next(9);
            isItEmpty = string.IsNullOrEmpty(GameGrid[potentialResponse].StoredChar) && potentialResponse != requestedCell;
        }
        return potentialResponse;
    }

    private bool checkIfDraw() 
    {
        return !GameGrid.Any(x => string.IsNullOrEmpty(x.StoredChar));
    }
        
    public async ValueTask DisposeAsync()
    {
        await hubConnection.SendAsync("RemoveFromGroup", GameId, currentPlayerName);
        await hubConnection.DisposeAsync();
    }
}
