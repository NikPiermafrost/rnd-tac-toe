@page "/"
@inject IMainHelpersService MainHelperService;
@inject NavigationManager NavigationManager;
@inject IJSRuntime JSRuntime;

<div class="container main-index-container" style="max-width: 500px">
    <EditForm OnValidSubmit="@OnSubmit" EditContext="@editContext">
        <div class="w-100 d-flex justify-content-start mb-3">
            <div class="@(isJoin ? "unselected new-game" : "selected new-game")" @onclick="@(() =>IsNewGame())">New Game</div>
            <div class="@(isJoin ? "selected join-game" : "unselected join-game")" @onclick="@(() =>IsJoin())">Join Game</div>
        </div>
        <DataAnnotationsValidator />
        <div class="form-group">
            <label for="username" style="font-size: 1.5rem">Username</label>
            <InputText class="form-control" id="username" @bind-Value="@gameForm.Username" />
            <ValidationMessage For="@(() => gameForm.Username)" />
        </div>
        @if (!isJoin)
        {
        <span style="font-size: 1.5rem">New Game</span>
        <div class="w-100">
            @if (!string.IsNullOrEmpty(newGameGuid))
            {
                <div class="room-code" @onclick="@(() => CopyToClipBoard())">Copy room code</div>
            }
        </div>
        }
        else
        {
        <label for="username"  style="font-size: 1.5rem">Insert the game code to join!</label>
            <div class="form-group">
                <InputText class="form-control w-100" id="username" @bind-Value="@gameForm.GameCode" />
            </div>
        }
        <hr />
        <div class="d-flex justify-content-end">
            <button disabled="@formInvalid" type="submit" class="btn btn-sm btn-light" style="background-color: #f3f5ef; font-weight: bold">
                @if (isJoin)
                {
                    <span>Join Game</span>
                }
                else
                {
                    <span>Start Game</span>
                }
            </button>
        </div>
    </EditForm>
</div>

@code {
    private LoginForm gameForm = new LoginForm();
    private string newGameGuid;
    private bool formInvalid = false;
    private bool isJoin = false;
    private EditContext editContext;

    protected override void OnInitialized()
    {
        newGameGuid = Guid.NewGuid().ToString().ToLower().Trim('-').Substring(0, 8);
        editContext = new EditContext(gameForm);
        editContext.OnFieldChanged += HandleFieldChanged;
    }

    private void HandleFieldChanged(object sender, FieldChangedEventArgs e)
    {
        formInvalid = !editContext.Validate();
        StateHasChanged();
    }

    void IsNewGame()
    {
        isJoin = false;
    }

    void IsJoin()
    {
        isJoin = true;
    }

    void CopyToClipBoard()
    {
        JSRuntime.InvokeVoidAsync("copyToClipBoard", newGameGuid);
    }

    void OnSubmit()
    {
        MainHelperService.SetCurrentUserName(gameForm.Username);
        MainHelperService.SetRandomnessValue(gameForm.Username);
        if (!string.IsNullOrEmpty(gameForm.GameCode))
        {
            MainHelperService.SetHasStarted(false);
            NavigationManager.NavigateTo($"/{gameForm.GameCode}");
        }
        else
        {
            MainHelperService.SetHasStarted(true);
            NavigationManager.NavigateTo($"/{newGameGuid}");
        }
    } 
}
